"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariableDecorator = exports.FunctionDecorator = exports.ClassDecorator = exports.Decorator = exports.TopLevelDecorator = exports.registerDecorator = void 0;
const transformer_1 = require("./transformer");
const utils_1 = require("./utils");
function registerDecorator(decorator) {
    TopLevelDecorator.registerVisitor(decorator);
    return TopLevelDecorator;
}
exports.registerDecorator = registerDecorator;
class TopLevelDecorator extends transformer_1.PathTransformVisitor {
    static registerVisitor(visitor) {
        TopLevelDecorator._visitor = visitor;
    }
    get visitor() {
        return TopLevelDecorator._visitor;
    }
    visitDecoratorNode(node) {
        if (this.visitor.decoratorMatcher(node)) {
            this.visitor.currentPath = this.currentParentPath;
            this.visitor.visit(this.currentParent);
        }
    }
    afterParse(_) {
        transformer_1.mergeTransformer(this, this.visitor);
        this.visit(this.program.sources.filter(this.visitor.sourceFilter));
    }
}
exports.TopLevelDecorator = TopLevelDecorator;
class Decorator extends transformer_1.PathTransformVisitor {
    /**
     * Default filter that removes library files
     */
    get sourceFilter() {
        return utils_1.not(utils_1.isLibrary);
    }
    get decoratorMatcher() {
        return (node) => utils_1.decorates(node, this.name);
    }
    get name() { return ""; }
    getDecorator(node) {
        return node.decorators && node.decorators.find(this.decoratorMatcher) || null;
    }
}
exports.Decorator = Decorator;
class ClassDecorator extends Decorator {
}
exports.ClassDecorator = ClassDecorator;
class FunctionDecorator extends Decorator {
}
exports.FunctionDecorator = FunctionDecorator;
class VariableDecorator extends Decorator {
}
exports.VariableDecorator = VariableDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2RlY29yYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwrQ0FBdUU7QUFZdkUsbUNBQWtFO0FBRWxFLFNBQWdCLGlCQUFpQixDQUFDLFNBQTJCO0lBQzNELGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUM3QyxPQUFPLGlCQUFpQixDQUFDO0FBQzNCLENBQUM7QUFIRCw4Q0FHQztBQU9ELE1BQWEsaUJBQWtCLFNBQVEsa0NBQW9CO0lBR3pELE1BQU0sQ0FBQyxlQUFlLENBQUMsT0FBeUI7UUFDOUMsaUJBQWlCLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztJQUN2QyxDQUFDO0lBRUQsSUFBWSxPQUFPO1FBQ2pCLE9BQU8saUJBQWlCLENBQUMsUUFBUSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxJQUFtQjtRQUNwQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDdkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1lBQ2xELElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUN4QztJQUNILENBQUM7SUFFRCxVQUFVLENBQUMsQ0FBUztRQUNsQiw4QkFBZ0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDO0NBRUY7QUF2QkQsOENBdUJDO0FBRUQsTUFBc0IsU0FBVSxTQUFRLGtDQUFvQjtJQUMxRDs7T0FFRztJQUNILElBQUksWUFBWTtRQUNkLE9BQU8sV0FBRyxDQUFDLGlCQUFTLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsSUFBSSxnQkFBZ0I7UUFDbEIsT0FBTyxDQUFDLElBQW1CLEVBQUUsRUFBRSxDQUFDLGlCQUFTLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUM1RCxDQUFDO0lBRUQsSUFBSSxJQUFJLEtBQWEsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRWpDLFlBQVksQ0FBQyxJQUEwQjtRQUNyQyxPQUFPLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksSUFBSSxDQUFDO0lBQ2hGLENBQUM7Q0FDRjtBQWpCRCw4QkFpQkM7QUFFRCxNQUFzQixjQUFlLFNBQVEsU0FBUztDQUlyRDtBQUpELHdDQUlDO0FBRUQsTUFBc0IsaUJBQWtCLFNBQVEsU0FBUztDQUV4RDtBQUZELDhDQUVDO0FBRUQsTUFBc0IsaUJBQWtCLFNBQVEsU0FBUztDQUV4RDtBQUZELDhDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGF0aFRyYW5zZm9ybVZpc2l0b3IsIG1lcmdlVHJhbnNmb3JtZXIgfSBmcm9tIFwiLi90cmFuc2Zvcm1lclwiO1xuaW1wb3J0IHtcbiAgQ2xhc3NEZWNsYXJhdGlvbixcbiAgRmllbGREZWNsYXJhdGlvbixcbiAgTWV0aG9kRGVjbGFyYXRpb24sXG4gIFBhcnNlcixcbiAgVmFyaWFibGVEZWNsYXJhdGlvbixcbiAgRnVuY3Rpb25EZWNsYXJhdGlvbixcbiAgU291cmNlLFxuICBEZWNvcmF0b3JOb2RlLFxuICBEZWNsYXJhdGlvblN0YXRlbWVudCxcbn0gZnJvbSBcIi4uL2FzXCI7XG5pbXBvcnQgeyBkZWNvcmF0ZXMsIG5vdCwgaXNMaWJyYXJ5LCBnZXREZWNvcmF0b3IgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVnaXN0ZXJEZWNvcmF0b3IoZGVjb3JhdG9yOiBEZWNvcmF0b3JWaXNpdG9yKSB7XG4gIFRvcExldmVsRGVjb3JhdG9yLnJlZ2lzdGVyVmlzaXRvcihkZWNvcmF0b3IpO1xuICByZXR1cm4gVG9wTGV2ZWxEZWNvcmF0b3I7XG59XG5cbmludGVyZmFjZSBEZWNvcmF0b3JWaXNpdG9yIGV4dGVuZHMgUGF0aFRyYW5zZm9ybVZpc2l0b3Ige1xuICBkZWNvcmF0b3JNYXRjaGVyOiAobm9kZTogRGVjb3JhdG9yTm9kZSkgPT4gYm9vbGVhbjtcbiAgc291cmNlRmlsdGVyOiAoczogU291cmNlKSA9PiBib29sO1xufVxuXG5leHBvcnQgY2xhc3MgVG9wTGV2ZWxEZWNvcmF0b3IgZXh0ZW5kcyBQYXRoVHJhbnNmb3JtVmlzaXRvciB7XG4gIHByaXZhdGUgc3RhdGljIF92aXNpdG9yOiBEZWNvcmF0b3JWaXNpdG9yO1xuXG4gIHN0YXRpYyByZWdpc3RlclZpc2l0b3IodmlzaXRvcjogRGVjb3JhdG9yVmlzaXRvcik6IHZvaWQge1xuICAgIFRvcExldmVsRGVjb3JhdG9yLl92aXNpdG9yID0gdmlzaXRvcjtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IHZpc2l0b3IoKTogRGVjb3JhdG9yVmlzaXRvciB7XG4gICAgcmV0dXJuIFRvcExldmVsRGVjb3JhdG9yLl92aXNpdG9yO1xuICB9XG5cbiAgdmlzaXREZWNvcmF0b3JOb2RlKG5vZGU6IERlY29yYXRvck5vZGUpIHtcbiAgICBpZiAodGhpcy52aXNpdG9yLmRlY29yYXRvck1hdGNoZXIobm9kZSkpIHtcbiAgICAgIHRoaXMudmlzaXRvci5jdXJyZW50UGF0aCA9IHRoaXMuY3VycmVudFBhcmVudFBhdGg7XG4gICAgICB0aGlzLnZpc2l0b3IudmlzaXQodGhpcy5jdXJyZW50UGFyZW50KTtcbiAgICB9XG4gIH1cblxuICBhZnRlclBhcnNlKF86IFBhcnNlcik6IHZvaWQge1xuICAgIG1lcmdlVHJhbnNmb3JtZXIodGhpcywgdGhpcy52aXNpdG9yKTtcbiAgICB0aGlzLnZpc2l0KHRoaXMucHJvZ3JhbS5zb3VyY2VzLmZpbHRlcih0aGlzLnZpc2l0b3Iuc291cmNlRmlsdGVyKSk7XG4gIH1cblxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRGVjb3JhdG9yIGV4dGVuZHMgUGF0aFRyYW5zZm9ybVZpc2l0b3Ige1xuICAvKipcbiAgICogRGVmYXVsdCBmaWx0ZXIgdGhhdCByZW1vdmVzIGxpYnJhcnkgZmlsZXNcbiAgICovXG4gIGdldCBzb3VyY2VGaWx0ZXIoKTogKHM6IFNvdXJjZSkgPT4gYm9vbCB7XG4gICAgcmV0dXJuIG5vdChpc0xpYnJhcnkpO1xuICB9XG5cbiAgZ2V0IGRlY29yYXRvck1hdGNoZXIoKTogKG5vZGU6IERlY29yYXRvck5vZGUpID0+IGJvb2xlYW4ge1xuICAgIHJldHVybiAobm9kZTogRGVjb3JhdG9yTm9kZSkgPT4gZGVjb3JhdGVzKG5vZGUsIHRoaXMubmFtZSlcbiAgfVxuXG4gIGdldCBuYW1lKCk6IHN0cmluZyB7IHJldHVybiBcIlwiOyB9XG5cbiAgZ2V0RGVjb3JhdG9yKG5vZGU6IERlY2xhcmF0aW9uU3RhdGVtZW50KTogRGVjb3JhdG9yTm9kZSB8IG51bGwge1xuICAgIHJldHVybiBub2RlLmRlY29yYXRvcnMgJiYgbm9kZS5kZWNvcmF0b3JzLmZpbmQodGhpcy5kZWNvcmF0b3JNYXRjaGVyKSB8fCBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDbGFzc0RlY29yYXRvciBleHRlbmRzIERlY29yYXRvciB7XG4gIGFic3RyYWN0IHZpc2l0RmllbGREZWNsYXJhdGlvbihub2RlOiBGaWVsZERlY2xhcmF0aW9uKTogdm9pZDtcbiAgYWJzdHJhY3QgdmlzaXRNZXRob2REZWNsYXJhdGlvbihub2RlOiBNZXRob2REZWNsYXJhdGlvbik6IHZvaWQ7XG4gIGFic3RyYWN0IHZpc2l0Q2xhc3NEZWNsYXJhdGlvbihub2RlOiBDbGFzc0RlY2xhcmF0aW9uKTogdm9pZDtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEZ1bmN0aW9uRGVjb3JhdG9yIGV4dGVuZHMgRGVjb3JhdG9yIHtcbiAgYWJzdHJhY3QgdmlzaXRGdW5jdGlvbkRlY2xhcmF0aW9uKG5vZGU6IEZ1bmN0aW9uRGVjbGFyYXRpb24pOiB2b2lkO1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVmFyaWFibGVEZWNvcmF0b3IgZXh0ZW5kcyBEZWNvcmF0b3Ige1xuICBhYnN0cmFjdCB2aXNpdFZhcmlhYmxlRGVjbGFyYXRpb24obm9kZTogVmFyaWFibGVEZWNsYXJhdGlvbik6IHZvaWQ7XG59XG4iXX0=